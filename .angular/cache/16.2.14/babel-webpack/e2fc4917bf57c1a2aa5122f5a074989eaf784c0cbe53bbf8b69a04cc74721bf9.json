{"ast":null,"code":"import { map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getUser(githubUsername) {\n    return this.httpClient.get(`https://api.github.com/users/${githubUsername}`);\n  }\n  // This method returns an observable of type Repository[] interface array. So each response/observable is an array object which will have a name for sure but description and topics are optional. \n  getRepos(githubUsername, pageSize, pageNumber) {\n    return this.httpClient.get(`https://api.github.com/users/${githubUsername}/repos?page=${pageNumber}&per_page=${pageSize}`).pipe(tap(_ => console.log(`Fetched repositories for ${githubUsername}`)));\n  }\n  getTotalRepoCount(username) {\n    return this.httpClient.get(`https://api.github.com/users/${username}`).pipe(map(user => user.public_repos));\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","tap","ApiService","constructor","httpClient","getUser","githubUsername","get","getRepos","pageSize","pageNumber","pipe","_","console","log","getTotalRepoCount","username","user","public_repos","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/hardikkalra/Desktop/fyle/src/app/services/api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Repository } from '../result/result.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getUser(githubUsername: string): Observable<any> {\n    return this.httpClient.get(`https://api.github.com/users/${githubUsername}`);\n  }\n// This method returns an observable of type Repository[] interface array. So each response/observable is an array object which will have a name for sure but description and topics are optional. \n  getRepos(githubUsername: string,  pageSize: number, pageNumber: number): Observable<Repository[]> {\n    return this.httpClient.get<Repository[]>(`https://api.github.com/users/${githubUsername}/repos?page=${pageNumber}&per_page=${pageSize}`).pipe(\n      tap(_ => console.log(`Fetched repositories for ${githubUsername}`)),\n      // catchError(error => {\n      //   console.error('Error fetching repositories:', error);\n      //   return throwError('Failed to fetch repositories');\n      // })\n    );\n  }\n\n  getTotalRepoCount(username: string): Observable<number> {\n    return this.httpClient.get<any>(`https://api.github.com/users/${username}`).pipe(\n      map(user => user.public_repos),\n      // catchError(error => {\n      //   console.error('Error fetching total repository count:', error);\n      //   return throwError('Failed to fetch total repository count');\n      // })\n    );\n  }\n  \n\n}\n\n\n"],"mappings":"AAGA,SAAqBA,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;;;AAMrD,OAAM,MAAOC,UAAU;EAErBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAgB;EAE9CC,OAAOA,CAACC,cAAsB;IAC5B,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAC,gCAAgCD,cAAc,EAAE,CAAC;EAC9E;EACF;EACEE,QAAQA,CAACF,cAAsB,EAAGG,QAAgB,EAAEC,UAAkB;IACpE,OAAO,IAAI,CAACN,UAAU,CAACG,GAAG,CAAe,gCAAgCD,cAAc,eAAeI,UAAU,aAAaD,QAAQ,EAAE,CAAC,CAACE,IAAI,CAC3IV,GAAG,CAACW,CAAC,IAAIC,OAAO,CAACC,GAAG,CAAC,4BAA4BR,cAAc,EAAE,CAAC,CAAC,CAKpE;EACH;EAEAS,iBAAiBA,CAACC,QAAgB;IAChC,OAAO,IAAI,CAACZ,UAAU,CAACG,GAAG,CAAM,gCAAgCS,QAAQ,EAAE,CAAC,CAACL,IAAI,CAC9EX,GAAG,CAACiB,IAAI,IAAIA,IAAI,CAACC,YAAY,CAAC,CAK/B;EACH;EAAC,QAAAN,CAAA,G;qBA1BUV,UAAU,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVrB,UAAU;IAAAsB,OAAA,EAAVtB,UAAU,CAAAuB,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}